diff --git a/db.Dockerfile b/db.Dockerfile
index 63c391c..4b495ea 100644
--- a/db.Dockerfile
+++ b/db.Dockerfile
@@ -1,13 +1,24 @@
-FROM microsoft/mssql-server-linux:latest
-ENV ACCEPT_EULA Y
-ENV SA_PASSWORD All0yDemokit!
-# Create app directory
-RUN mkdir -p /usr/src/app
-WORKDIR /usr/src/app
+# Stage-1: Create image to build our application with
+FROM microsoft/dotnet-framework:4.7.2-sdk AS build
+WORKDIR /app
 
-COPY . /usr/src/app/
+# copy csproj and restore as distinct layers
+COPY *.sln .
+COPY Sources/*.config .
+COPY Sources/*.config /Sources/.
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.csproj ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.config ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.csproj ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.config ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.csproj ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.config ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.csproj ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.config ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+RUN nuget restore
 
-# Grant permissions for the import-data script to be executable
-RUN chmod +x /usr/src/app/import-data.sh
-
-CMD /bin/bash ./entrypoint.sh
\ No newline at end of file
+FROM microsoft/mssql-server-windows-developer:1709
+COPY ./Setup /app/Setup
+COPY --from=build /app/Packages /app/Packages
+WORKDIR /app/Setup
+RUN ./SetupDatabases.cmd
+WORKDIR /
diff --git a/docker-compose.yml b/docker-compose.yml
index 643966e..761570d 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,26 +1,29 @@
 version: '3'
 
 services:
-  qs-site:
+  site:
+    image: quicksilver-site:latest
     build:
       context: .
-      dockerfile: qs-site.Dockerfile
+      dockerfile: site.Dockerfile
     networks:
       - qs-network
     depends_on:
-      - qs-db
-  qs-manager:
+      - db
+  manager:
+    image: quicksilver-manager:latest
     build:
       context: .
-      dockerfile: qs-manager.Dockerfile
+      dockerfile: manager.Dockerfile
     networks:
       - qs-network
     depends_on:
-      - qs-db
-  qs-db:
+      - db
+  db:
+    image: quicksilver-db:latest
     build:
       context: .
-      dockerfile: qs-db.Dockerfile
+      dockerfile: db.Dockerfile
     environment: 
       - ACCEPT_EULA=Y
       - sa_password=All0yDemokit!
diff --git a/iis-mssql.Dockerfile b/iis-mssql.Dockerfile
new file mode 100644
index 0000000..c2d96ff
--- /dev/null
+++ b/iis-mssql.Dockerfile
@@ -0,0 +1,69 @@
+# escape=`
+
+##  dotnet-framework-docker/4.7.2-windowsservercore-1803/runtime/Dockerfile
+FROM microsoft/windowsservercore:1803
+ENV COMPLUS_NGenProtectedProcess_FeatureEnabled 0
+
+##  aspnet-docker/4.7.2-windowsservercore-1803/runtime/Dockerfile
+# FROM microsoft/dotnet-framework:4.7.2-runtime-windowsservercore-1803
+
+SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+
+RUN Add-WindowsFeature Web-Server; `
+    Add-WindowsFeature NET-Framework-45-ASPNET; `
+    Add-WindowsFeature Web-Asp-Net45; `
+    Remove-Item -Recurse C:\inetpub\wwwroot\*; `
+    Invoke-WebRequest -Uri https://dotnetbinaries.blob.core.windows.net/servicemonitor/2.0.1.3/ServiceMonitor.exe -OutFile C:\ServiceMonitor.exe
+
+#download Roslyn nupkg and ngen the compiler binaries
+RUN Invoke-WebRequest https://api.nuget.org/packages/microsoft.net.compilers.2.8.2.nupkg -OutFile c:\microsoft.net.compilers.2.8.2.zip ; `	
+    Expand-Archive -Path c:\microsoft.net.compilers.2.8.2.zip -DestinationPath c:\RoslynCompilers ; `
+    Remove-Item c:\microsoft.net.compilers.2.8.2.zip -Force ; `
+    &C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\csc.exe /ExeConfig:c:\RoslynCompilers\tools\csc.exe | `
+    &C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\vbc.exe /ExeConfig:c:\RoslynCompilers\tools\vbc.exe  | `
+    &C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\VBCSCompiler.exe /ExeConfig:c:\RoslynCompilers\tools\VBCSCompiler.exe | `
+    &C:\Windows\Microsoft.NET\Framework\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\csc.exe /ExeConfig:c:\RoslynCompilers\tools\csc.exe | `
+    &C:\Windows\Microsoft.NET\Framework\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\vbc.exe /ExeConfig:c:\RoslynCompilers\tools\vbc.exe | `
+    &C:\Windows\Microsoft.NET\Framework\v4.0.30319\ngen.exe install c:\RoslynCompilers\tools\VBCSCompiler.exe  /ExeConfig:c:\RoslynCompilers\tools\VBCSCompiler.exe ;
+
+ENV ROSLYN_COMPILER_LOCATION c:\\RoslynCompilers\\tools
+
+EXPOSE 80
+
+#ENTRYPOINT ["C:\\ServiceMonitor.exe", "w3svc"]
+
+##  mssql-docker/windows/mssql-server-windows-developer/dockerfile
+#FROM microsoft/windowsservercore
+
+#LABEL maintainer "Perry Skountrianos"
+
+# Download Links:
+ENV exe "https://go.microsoft.com/fwlink/?linkid=840945"
+ENV box "https://go.microsoft.com/fwlink/?linkid=840944"
+
+ENV sa_password="_" `
+    attach_dbs="[]" `
+    ACCEPT_EULA="_" `
+    sa_password_path="C:\ProgramData\Docker\secrets\sa-password"
+
+SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
+
+# make install files accessible
+COPY start.ps1 /
+WORKDIR /
+
+RUN Invoke-WebRequest -Uri $env:box -OutFile SQL.box ; `
+        Invoke-WebRequest -Uri $env:exe -OutFile SQL.exe ; `
+        Start-Process -Wait -FilePath .\SQL.exe -ArgumentList /qs, /x:setup ; `
+        .\setup\setup.exe /q /ACTION=Install /INSTANCENAME=MSSQLSERVER /FEATURES=SQLEngine /UPDATEENABLED=0 /SQLSVCACCOUNT='NT AUTHORITY\System' /SQLSYSADMINACCOUNTS='BUILTIN\ADMINISTRATORS' /TCPENABLED=1 /NPENABLED=0 /IACCEPTSQLSERVERLICENSETERMS ; `
+        Remove-Item -Recurse -Force SQL.exe, SQL.box, setup
+
+RUN stop-service MSSQLSERVER ; `
+        set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql14.MSSQLSERVER\mssqlserver\supersocketnetlib\tcp\ipall' -name tcpdynamicports -value '' ; `
+        set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql14.MSSQLSERVER\mssqlserver\supersocketnetlib\tcp\ipall' -name tcpport -value 1433 ; `
+        set-itemproperty -path 'HKLM:\software\microsoft\microsoft sql server\mssql14.MSSQLSERVER\mssqlserver\'  -name LoginMode -value 2 ;
+
+HEALTHCHECK CMD [ "sqlcmd", "-Q", "select 1" ]
+
+ENTRYPOINT ["C:\\ServiceMonitor.exe", "w3svc"]
+CMD .\start -sa_password $env:sa_password -ACCEPT_EULA $env:ACCEPT_EULA -attach_dbs \"$env:attach_dbs\" -Verbose
\ No newline at end of file
diff --git a/linux-db.Dockerfile b/linux-db.Dockerfile
new file mode 100644
index 0000000..63c391c
--- /dev/null
+++ b/linux-db.Dockerfile
@@ -0,0 +1,13 @@
+FROM microsoft/mssql-server-linux:latest
+ENV ACCEPT_EULA Y
+ENV SA_PASSWORD All0yDemokit!
+# Create app directory
+RUN mkdir -p /usr/src/app
+WORKDIR /usr/src/app
+
+COPY . /usr/src/app/
+
+# Grant permissions for the import-data script to be executable
+RUN chmod +x /usr/src/app/import-data.sh
+
+CMD /bin/bash ./entrypoint.sh
\ No newline at end of file
diff --git a/manager.Dockerfile b/manager.Dockerfile
new file mode 100644
index 0000000..7cf7e23
--- /dev/null
+++ b/manager.Dockerfile
@@ -0,0 +1,29 @@
+# Stage-1: Create image to build our application with
+FROM microsoft/dotnet-framework:4.7.2-sdk AS build
+WORKDIR /app
+
+# copy csproj and restore as distinct layers
+COPY *.sln .
+COPY Sources/*.config .
+COPY Sources/*.config /Sources/.
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.csproj ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.config ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.csproj ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.config ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.csproj ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.config ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.csproj ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.config ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+RUN nuget restore
+
+# copy everything else and build app
+COPY Sources/. ./Sources/
+WORKDIR /app
+RUN msbuild /p:Configuration=Release
+
+# Stage-2: Create image to run our application with
+FROM microsoft/aspnet:4.7.2-windowsservercore-1803
+RUN Add-WindowsFeature Web-WebSockets
+WORKDIR /inetpub/wwwroot
+COPY --from=build /app/Sources/EPiServer.Reference.Commerce.Manager/. .
+# RUN icacls ./* /grant everyone:F /T
\ No newline at end of file
diff --git a/site.Dockerfile b/site.Dockerfile
new file mode 100644
index 0000000..d08b378
--- /dev/null
+++ b/site.Dockerfile
@@ -0,0 +1,29 @@
+# Stage-1: Create image to build our application with
+FROM microsoft/dotnet-framework:4.7.2-sdk AS build
+WORKDIR /app
+
+# copy csproj and restore as distinct layers
+COPY *.sln .
+COPY Sources/*.config .
+COPY Sources/*.config /Sources/.
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.csproj ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Manager/*.config ./Sources/EPiServer.Reference.Commerce.Manager/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.csproj ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Shared/*.config ./Sources/EPiServer.Reference.Commerce.Shared/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.csproj ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site/*.config ./Sources/EPiServer.Reference.Commerce.Site/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.csproj ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+COPY Sources/EPiServer.Reference.Commerce.Site.Tests/*.config ./Sources/EPiServer.Reference.Commerce.Site.Tests/
+RUN nuget restore
+
+# copy everything else and build app
+COPY Sources/. ./Sources/
+WORKDIR /app
+RUN msbuild /p:Configuration=Release
+
+# Stage-2: Create image to run our application with
+FROM iis-mssql
+RUN Add-WindowsFeature Web-WebSockets
+WORKDIR /inetpub/wwwroot
+COPY --from=build /app/Sources/EPiServer.Reference.Commerce.Site/. .
+# RUN icacls ./* /grant everyone:F /T
\ No newline at end of file
diff --git a/start.ps1 b/start.ps1
new file mode 100644
index 0000000..9447e04
--- /dev/null
+++ b/start.ps1
@@ -0,0 +1,77 @@
+# The script sets the sa password and start the SQL Service
+# Also it attaches additional database from the disk
+# The format for attach_dbs
+
+param(
+[Parameter(Mandatory=$false)]
+[string]$sa_password,
+
+[Parameter(Mandatory=$false)]
+[string]$ACCEPT_EULA,
+
+[Parameter(Mandatory=$false)]
+[string]$attach_dbs
+)
+
+
+if($ACCEPT_EULA -ne "Y" -And $ACCEPT_EULA -ne "y")
+{
+	Write-Verbose "ERROR: You must accept the End User License Agreement before this container can start."
+	Write-Verbose "Set the environment variable ACCEPT_EULA to 'Y' if you accept the agreement."
+
+    exit 1
+}
+
+# start the service
+Write-Verbose "Starting SQL Server"
+start-service MSSQLSERVER
+
+if($sa_password -eq "_") {
+    if (Test-Path $env:sa_password_path) {
+        $sa_password = Get-Content -Raw $secretPath
+    }
+    else {
+        Write-Verbose "WARN: Using default SA password, secret file not found at: $secretPath"
+    }
+}
+
+if($sa_password -ne "_")
+{
+    Write-Verbose "Changing SA login credentials"
+    $sqlcmd = "ALTER LOGIN sa with password=" +"'" + $sa_password + "'" + ";ALTER LOGIN sa ENABLE;"
+    & sqlcmd -Q $sqlcmd
+}
+
+$attach_dbs_cleaned = $attach_dbs.TrimStart('\\').TrimEnd('\\')
+
+$dbs = $attach_dbs_cleaned | ConvertFrom-Json
+
+if ($null -ne $dbs -And $dbs.Length -gt 0)
+{
+    Write-Verbose "Attaching $($dbs.Length) database(s)"
+	    
+    Foreach($db in $dbs) 
+    {            
+        $files = @();
+        Foreach($file in $db.dbFiles)
+        {
+            $files += "(FILENAME = N'$($file)')";           
+        }
+
+        $files = $files -join ","
+        $sqlcmd = "IF EXISTS (SELECT 1 FROM SYS.DATABASES WHERE NAME = '" + $($db.dbName) + "') BEGIN EXEC sp_detach_db [$($db.dbName)] END;CREATE DATABASE [$($db.dbName)] ON $($files) FOR ATTACH;"
+
+        Write-Verbose "Invoke-Sqlcmd -Query $($sqlcmd)"
+        & sqlcmd -Q $sqlcmd
+	}
+}
+
+Write-Verbose "Started SQL Server."
+
+$lastCheck = (Get-Date).AddSeconds(-2) 
+while ($true) 
+{ 
+    Get-EventLog -LogName Application -Source "MSSQL*" -After $lastCheck | Select-Object TimeGenerated, EntryType, Message	 
+    $lastCheck = Get-Date 
+    Start-Sleep -Seconds 2 
+}
